import os
import json
from pathlib import Path
import google.generativeai as genai
import time
import re
from PyPDF2 import PdfReader, PdfWriter
import concurrent.futures

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–∫—Å–∏ –∏ API –∏–∑ —Ñ–∞–π–ª–æ–≤
try:
    with open('autorization\\proxy.txt', 'r', encoding='utf-8') as file:
        proxy = file.read().split(":")
        PROXY_ADDRESS, PROXY_PORT, PROXY_LOGIN, PROXY_PASSWORD = proxy
except FileNotFoundError:
    print("‚ö†Ô∏è –§–∞–π–ª 'autorization\\proxy.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–∫—Å–∏ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.")
    PROXY_ADDRESS = None

try:
    with open('autorization\\API_GEMINI.txt', 'r', encoding='utf-8') as file:
        GOOGLE_API_KEY = file.read().strip()
except FileNotFoundError:
    print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –§–∞–π–ª 'autorization\\API_GEMINI.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    GOOGLE_API_KEY = None


# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---


def setup_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏ API-–∫–ª—é—á."""
    if not GOOGLE_API_KEY:
        print("‚ùå API –∫–ª—é—á Google –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return False
    try:
        if PROXY_ADDRESS:
            proxy_url = f"http://{PROXY_LOGIN}:{PROXY_PASSWORD}@{PROXY_ADDRESS}:{PROXY_PORT}"
            os.environ['HTTPS_PROXY'] = proxy_url
            os.environ['HTTP_PROXY'] = proxy_url
            print(f"üöÄ –ü—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {PROXY_ADDRESS}:{PROXY_PORT}")

        genai.configure(api_key=GOOGLE_API_KEY)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google AI –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def find_person_folder():
    """–ù–∞—Ö–æ–¥–∏—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'People'."""
    people_dir = Path("People")
    if not people_dir.is_dir():
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{people_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return None

    subdirectories = [d for d in people_dir.iterdir() if d.is_dir()]
    if len(subdirectories) == 1:
        print(f"üìÇ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {subdirectories[0].name}")
        return subdirectories[0]
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: –í–Ω—É—Ç—Ä–∏ '{people_dir}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –ø–∞–ø–∫–∞.")
        return None


def split_pdf_chunks(file_path, chunk_size=50):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç PDF-—Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ API."""
    if not file_path.exists():
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return []

    print(f"üî™ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ '{file_path.name}' –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ {chunk_size} —Å—Ç—Ä–∞–Ω–∏—Ü...")
    reader = PdfReader(file_path)
    total_pages = len(reader.pages)
    chunk_paths = []
    temp_dir = file_path.parent / "temp_pdf_chunks_for_slicing"
    temp_dir.mkdir(exist_ok=True)

    for i in range(0, total_pages, chunk_size):
        writer = PdfWriter()
        end_page = min(i + chunk_size, total_pages)
        for page_num in range(i, end_page):
            writer.add_page(reader.pages[page_num])

        chunk_path = temp_dir / f"part_{i // chunk_size + 1}.pdf"
        with open(chunk_path, "wb") as f:
            writer.write(f)
        chunk_paths.append(chunk_path)

    print(f"‚úÖ –§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(chunk_paths)} —á–∞—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    return chunk_paths


def upload_file_with_retry(file_path, max_retries=3):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    for attempt in range(max_retries):
        try:
            print(f"  > –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –ó–∞–≥—Ä—É–∑–∫–∞ '{file_path.name}'...")
            uploaded_file = genai.upload_file(path=file_path)
            time.sleep(1)
            return uploaded_file
        except Exception as e:
            print(f"  > ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '{file_path.name}': {e}")
            if attempt < max_retries - 1:
                time.sleep(2 ** attempt)
    return None


def sanitize_filename(name):
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    return re.sub(r'[\\/*?:"<>|]', "_", name)


def create_document_inventory_and_split(person_folder, model):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI –∏ —Ä–∞–∑—Ä–µ–∑–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π PDF –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã.
    """
    # --- 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π ---
    person_name = person_folder.name
    # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    source_pdf_path = person_folder / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ –ê–Ω–∞–ª–∏–∑" / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ (–û–±—â–∏–π).pdf"
    output_dir = person_folder / "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è"

    if not source_pdf_path.exists():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {source_pdf_path}")
        return

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    output_dir.mkdir(exist_ok=True)
    print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

    # --- 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ AI ---
    pdf_chunks = split_pdf_chunks(source_pdf_path)
    if not pdf_chunks:
        return

    uploaded_files = []
    temp_dir = source_pdf_path.parent / "temp_pdf_chunks_for_slicing"

    try:
        # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            future_to_file = {executor.submit(upload_file_with_retry, chunk): chunk for chunk in pdf_chunks}
            for future in concurrent.futures.as_completed(future_to_file):
                uploaded_file = future.result()
                if uploaded_file:
                    uploaded_files.append(uploaded_file)

        if not uploaded_files:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        # --- 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫ AI ---
        prompt = """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–∏—Å—å –≤—Å–µ—Ö –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö—Å—è –≤ —Ñ–∞–π–ª–µ, –∏ —É–∫–∞–∑–∞—Ç—å –∏—Ö —Ç–æ—á–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü.

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ```json ```. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON.

JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º (–º–∞—Å—Å–∏–≤–æ–º) –æ–±—ä–µ–∫—Ç–æ–≤. –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–∏ –∫–ª—é—á–∞:
1. "document_name": –ö—Ä–∞—Ç–∫–æ–µ –∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–∞—Å–ø–æ—Ä—Ç –†–§", "–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä ‚Ññ123 –æ—Ç 01.01.2022").
2. "start_page": –ù–æ–º–µ—Ä –ü–ï–†–í–û–ô —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∫–∞–∫ —á–∏—Å–ª–æ).
3. "end_page": –ù–æ–º–µ—Ä –ü–û–°–õ–ï–î–ù–ï–ô —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∫–∞–∫ —á–∏—Å–ª–æ).

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∫–≤–æ–∑–Ω–æ–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º PDF-—Ñ–∞–π–ª–µ.
2. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –¥–æ–∫—É–º–µ–Ω—Ç—ã.
3. –£–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü.
4. "document_name" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–æ–±–Ω—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
5. –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, "start_page" –∏ "end_page" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏.

–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞:
[
  {
    "document_name": "–ü–∞—Å–ø–æ—Ä—Ç –†–§ –¥–æ–ª–∂–Ω–∏–∫–∞",
    "start_page": 1,
    "end_page": 3
  },
  {
    "document_name": "–°–ù–ò–õ–°",
    "start_page": 4,
    "end_page": 4
  },
  {
    "document_name": "–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä ‚Ññ123-–ê–ë–í –æ—Ç 02.02.2022",
    "start_page": 5,
    "end_page": 12
  }
]
"""
        print(f"üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        response = model.generate_content(uploaded_files + [prompt], request_options={"timeout": 1000})
        clean_json_str = re.sub(r'```json\s*|```', '', response.text).strip()

        # --- 4. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –∏ –Ω–∞—Ä–µ–∑–∫–∞ PDF ---
        document_inventory = json.loads(clean_json_str)

        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–∏—Å—å –∏–∑ {len(document_inventory)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ù–∞—á–∏–Ω–∞—é –Ω–∞—Ä–µ–∑–∫—É...")

        original_pdf_reader = PdfReader(source_pdf_path)
        total_pages_in_pdf = len(original_pdf_reader.pages)

        for i, doc_info in enumerate(document_inventory, 1):
            doc_name = doc_info.get("document_name", f"–î–æ–∫—É–º–µ–Ω—Ç_{i}")
            start_page = doc_info.get("start_page")
            end_page = doc_info.get("end_page")

            if start_page is None or end_page is None:
                print(f"  > ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç '{doc_name}' –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü.")
                continue

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 0-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–ª—è PyPDF2
            start_idx = start_page - 1
            end_idx = end_page - 1

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if not (0 <= start_idx <= end_idx < total_pages_in_pdf):
                print(
                    f"  > ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω '{doc_name}'. –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü: {start_page}-{end_page} (–≤—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ {total_pages_in_pdf} —Å—Ç—Ä.)")
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            safe_name = sanitize_filename(doc_name)
            output_filename = f"{i}. {safe_name}.pdf"
            output_filepath = output_dir / output_filename

            # –ù–∞—Ä–µ–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            try:
                writer = PdfWriter()
                for page_num in range(start_idx, end_idx + 1):
                    writer.add_page(original_pdf_reader.pages[page_num])

                with open(output_filepath, "wb") as f_out:
                    writer.write(f_out)
                print(f"  > ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: '{output_filename}' (—Å—Ç—Ä–∞–Ω–∏—Ü—ã {start_page}-{end_page})")
            except Exception as e:
                print(f"  > ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{output_filename}': {e}")


    except json.JSONDecodeError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏. –û—Ç–≤–µ—Ç –±—ã–ª:")
        print(response.text)
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # --- 5. –û—á–∏—Å—Ç–∫–∞ ---
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        for chunk in pdf_chunks:
            try:
                os.remove(chunk)
            except OSError as e:
                print(f"  > –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {chunk}: {e}")
        try:
            os.rmdir(temp_dir)
        except OSError as e:
            # –ü–∞–ø–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç–∞, –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–∏–ª—Å—è
            pass

        for uploaded_file in uploaded_files:
            try:
                genai.delete_file(uploaded_file.name)
            except Exception:
                pass
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞."""
    if not setup_environment():
        return

    model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest")
    person_folder = find_person_folder()
    if not person_folder:
        return

    create_document_inventory_and_split(person_folder, model)


if __name__ == "__main__":
    main()
