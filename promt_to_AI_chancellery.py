import os
import json
from pathlib import Path
import google.generativeai as genai
import time
import concurrent.futures
import re

with open('autorization\\proxy.txt', 'r', encoding='utf-8') as file:
    proxy = file.read().split(":")
    PROXY_ADDRESS = proxy[0]
    PROXY_PORT = proxy[1]
    PROXY_LOGIN = proxy[2]
    PROXY_PASSWORD = proxy[3]
with open('autorization\\API_GEMINI.txt', 'r', encoding='utf-8') as file:
    GOOGLE_API_KEY = file.read()


def setup_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏ API-–∫–ª—é—á –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
    try:
        if PROXY_ADDRESS:
            proxy_url = f"http://{PROXY_LOGIN}:{PROXY_PASSWORD}@{PROXY_ADDRESS}:{PROXY_PORT}"
            os.environ['HTTPS_PROXY'] = proxy_url
            os.environ['HTTP_PROXY'] = proxy_url
            print(f"üöÄ –ü—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {PROXY_ADDRESS}:{PROXY_PORT}")

        genai.configure(api_key=GOOGLE_API_KEY)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google AI –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def find_person_folder():
    """–ù–∞—Ö–æ–¥–∏—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'People'."""
    people_dir = Path("People")
    if not people_dir.is_dir():
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{people_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return None

    subdirectories = [d for d in people_dir.iterdir() if d.is_dir()]
    if len(subdirectories) == 1:
        return subdirectories[0]
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: –í–Ω—É—Ç—Ä–∏ '{people_dir}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –ø–∞–ø–∫–∞.")
        return None


def upload_file_with_retry(file_path, max_retries=3):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö."""
    for attempt in range(max_retries):
        try:
            print(f"  > –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ '{file_path.name}'...")
            uploaded_file = genai.upload_file(path=file_path)
            time.sleep(1)
            return uploaded_file
        except Exception as e:
            print(f"  > ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '{file_path.name}' (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    return None


def extract_amounts_from_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—ã –¥–µ–Ω–µ–≥ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    # –ò—â–µ–º —á–∏—Å–ª–∞ —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –¥—Ä–æ–±—è–º–∏ (—Ñ–æ—Ä–º–∞—Ç: 123.45)
    amounts = re.findall(r'\b\d+\.\d{2}\b', text)
    # –ò—â–µ–º —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: 123)
    amounts += re.findall(r'\b\d+\b', text)
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float
    return [float(amount) for amount in amounts if float(amount) > 0]


def analyze_stationery_expenses(person_folder, model):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ JPG —Ñ–∞–π–ª–æ–≤ —Å '–ø–æ—á—Ç' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏."""
    materials_folder = person_folder / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞"
    person_name = person_folder.name

    if not materials_folder.is_dir():
        print(f"‚ùå –ü–∞–ø–∫–∞ '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {person_folder}")
        return None

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ JPG —Ñ–∞–π–ª—ã —Å '–ø–æ—á—Ç' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    post_files = []
    for pattern in ["*–ø–æ—á—Ç*", "*–ü–æ—á—Ç*", "*–ü–û–ß–¢*"]:
        post_files.extend(list(materials_folder.glob(f"{pattern}.jpg")))
        post_files.extend(list(materials_folder.glob(f"{pattern}.jpeg")))

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    post_files = list(set(post_files))

    if not post_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ JPG —Ñ–∞–π–ª–æ–≤ —Å '–ø–æ—á—Ç' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏")
        return {"sum chancellery": "0.00"}

    print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏: {len(post_files)}")
    print(f"üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—á—Ç–æ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è: {person_name}")

    uploaded_files = []
    try:
        # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ (–ø–æ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
        with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            future_to_file = {executor.submit(upload_file_with_retry, post_file): post_file for post_file in post_files}

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for future in concurrent.futures.as_completed(future_to_file):
                post_file = future_to_file[future]
                try:
                    uploaded_file = future.result()
                    if uploaded_file:
                        uploaded_files.append(uploaded_file)
                        print(f"  > ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {post_file.name}")
                except Exception as e:
                    print(f"  > ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {post_file.name}: {e}")

        if not uploaded_files:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            return {"sum chancellery": "0.00"}

        prompt_text = """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. 
–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—á—Ç–æ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö (–∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö). –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ—Ä–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å —Å–∞–π—Ç–∞ –ü–û–ß–¢–ê –†–û–°–°–ò–ò. –ù–∞–π–¥–∏ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç. 

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ```json ```. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON.

–§–æ—Ä–º–∞—Ç JSON:
{
"amounts": ["—Å–ø–∏—Å–æ–∫", "–≤—Å–µ—Ö", "–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö", "—Å—É–º–º"]
}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –£–∫–∞–∑—ã–≤–∞–π –¢–û–õ–¨–ö–û —Ç–µ —Å—É–º–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ –≤–∏–¥–Ω—ã –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏
2. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –Ω–µ—Ç - –≤–µ—Ä–Ω–∏ {"amounts": []}
3. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å—É–º–º—ã –∏ –Ω–µ –ø—ã—Ç–∞–π—Å—è –∏—Ö –≤—ã—á–∏—Å–ª—è—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∏–∫–∏
4. –ï—Å–ª–∏ —Å—É–º–º–∞ —É–∫–∞–∑–∞–Ω–∞ —Å –∫–æ–ø–µ–π–∫–∞–º–∏ - —Å–æ—Ö—Ä–∞–Ω—è–π –∫–æ–ø–µ–π–∫–∏
5. –î–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –¥—Ä–æ–±–µ–π –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫—É –≤–º–µ—Å—Ç–æ –∑–∞–ø—è—Ç–æ–π
6. –£–±–∏—Ä–∞–π –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –≤ —á–∏—Å–ª–∞—Ö
7. –ù–ï –°–£–ú–ú–ò–†–£–ô —Å—É–º–º—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ! –ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞
8. –í—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ JSON

–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥—ã:
{
"amounts": ["125.50", "300.00", "87.25"]
}

–ü—Ä–∏–º–µ—Ä –µ—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:
{
"amounts": []
}
"""

        print("  > –ê–Ω–∞–ª–∏–∑ –ø–æ—á—Ç–æ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤...")
        response = model.generate_content(uploaded_files + [prompt_text], request_options={"timeout": 600})
        response_text = response.text.strip()

        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if response_text.startswith('```json'):
            response_text = response_text.replace('```json', '').replace('```', '').strip()
        elif response_text.startswith('```'):
            response_text = response_text.replace('```', '').strip()

        result = json.loads(response_text)
        amounts_list = result.get("amounts", [])

        # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É–º–º—ã
        total = 0.0
        valid_amounts = []

        for amount_str in amounts_list:
            try:
                # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_amount = amount_str.replace(' ', '').replace(',', '.')
                amount = float(clean_amount)
                if amount > 0:
                    total += amount
                    valid_amounts.append(amount)
            except (ValueError, TypeError):
                continue

        print(f"  > –ù–∞–π–¥–µ–Ω–æ —Å—É–º–º: {len(valid_amounts)}")
        print(f"  > –û–±—â–∞—è —Å—É–º–º–∞: {total:.2f}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_result = {"sum chancellery": f"{total:.2f}"}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        stationery_file = person_folder / "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã.json"
        with open(stationery_file, "w", encoding="utf-8") as f:
            json.dump(final_result, f, ensure_ascii=False, indent=4)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {stationery_file}")

        return final_result

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
        return {"sum chancellery": "0.00"}

    finally:
        # –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω—Ü–µ
        for uploaded_file in uploaded_files:
            try:
                genai.delete_file(uploaded_file.name)
            except:
                pass


def main():
    if not setup_environment():
        return

    model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest")
    person_folder = find_person_folder()
    if not person_folder:
        return

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ JPG —Ñ–∞–π–ª–æ–≤ —Å "–ø–æ—á—Ç" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    print("üìä –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏)...")
    stationery_result = analyze_stationery_expenses(person_folder, model)

    if stationery_result:
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤:")
        for key, value in stationery_result.items():
            print(f"  {key}: {value}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã")


if __name__ == "__main__":
    main()