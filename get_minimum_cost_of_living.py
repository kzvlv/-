import os
import json
from pathlib import Path
import google.generativeai as genai
import time
import re
from PyPDF2 import PdfReader, PdfWriter
from datetime import datetime
import concurrent.futures

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–∫—Å–∏ –∏ API –∏–∑ —Ñ–∞–π–ª–æ–≤
try:
    with open('autorization\\proxy.txt', 'r', encoding='utf-8') as file:
        proxy = file.read().split(":")
        PROXY_ADDRESS = proxy[0]
        PROXY_PORT = proxy[1]
        PROXY_LOGIN = proxy[2]
        PROXY_PASSWORD = proxy[3]
except FileNotFoundError:
    print("‚ö†Ô∏è –§–∞–π–ª 'autorization\\proxy.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–∫—Å–∏ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.")
    PROXY_ADDRESS = None

try:
    with open('autorization\\API_GEMINI.txt', 'r', encoding='utf-8') as file:
        GOOGLE_API_KEY = file.read().strip()
except FileNotFoundError:
    print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –§–∞–π–ª 'autorization\\API_GEMINI.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à API –∫–ª—é—á.")
    GOOGLE_API_KEY = None


# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---


def setup_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏ API-–∫–ª—é—á –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
    if not GOOGLE_API_KEY:
        print("‚ùå API –∫–ª—é—á Google –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return False
    try:
        if PROXY_ADDRESS:
            proxy_url = f"http://{PROXY_LOGIN}:{PROXY_PASSWORD}@{PROXY_ADDRESS}:{PROXY_PORT}"
            os.environ['HTTPS_PROXY'] = proxy_url
            os.environ['HTTP_PROXY'] = proxy_url
            print(f"üöÄ –ü—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {PROXY_ADDRESS}:{PROXY_PORT}")

        genai.configure(api_key=GOOGLE_API_KEY)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google AI –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def find_person_folder():
    """–ù–∞—Ö–æ–¥–∏—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'People'."""
    people_dir = Path("People")
    if not people_dir.is_dir():
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{people_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return None

    subdirectories = [d for d in people_dir.iterdir() if d.is_dir()]
    if len(subdirectories) == 1:
        print(f"üìÇ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {subdirectories[0].name}")
        return subdirectories[0]
    elif len(subdirectories) > 1:
        print(f"‚ùå –û—à–∏–±–∫–∞: –í–Ω—É—Ç—Ä–∏ '{people_dir}' –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–ø–æ–∫. –û—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É.")
        return None
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: –í–Ω—É—Ç—Ä–∏ '{people_dir}' –ø–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return None


def split_pdf(file_path, chunk_size=50):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç PDF-—Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ chunk_size —Å—Ç—Ä–∞–Ω–∏—Ü."""
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return []

    print(f"üî™ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ '{file_path.name}' –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ {chunk_size} —Å—Ç—Ä–∞–Ω–∏—Ü...")
    reader = PdfReader(file_path)
    total_pages = len(reader.pages)
    chunk_paths = []
    temp_dir = file_path.parent / "temp_pdf_chunks"
    temp_dir.mkdir(exist_ok=True)

    for i in range(0, total_pages, chunk_size):
        writer = PdfWriter()
        end_page = min(i + chunk_size, total_pages)
        for page_num in range(i, end_page):
            writer.add_page(reader.pages[page_num])

        chunk_path = temp_dir / f"part_{i // chunk_size + 1}.pdf"
        with open(chunk_path, "wb") as f:
            writer.write(f)
        chunk_paths.append(chunk_path)

    print(f"‚úÖ –§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(chunk_paths)} —á–∞—Å—Ç–µ–π.")
    return chunk_paths


def upload_file_with_retry(file_path, max_retries=3):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö."""
    for attempt in range(max_retries):
        try:
            print(f"  > –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ '{file_path.name}'...")
            uploaded_file = genai.upload_file(path=file_path)
            time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
            return uploaded_file
        except Exception as e:
            print(f"  > ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '{file_path.name}' (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    return None


def analyze_subsistence_minimum(person_folder, model):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Ö–æ–¥—ã, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É —Ä–µ—à–µ–Ω–∏—è, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∂–∏—Ç–æ—á–Ω–æ–º –º–∏–Ω–∏–º—É–º–µ.
    """
    person_name = person_folder.name
    income_file = person_folder / "–î–æ—Ö–æ–¥—ã.json"
    info_file = person_folder / "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.json"  # <-- –ù–û–í–û–ï: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    analysis_pdf = person_folder / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ –ê–Ω–∞–ª–∏–∑\\–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ (–û–±—â–∏–π).pdf"
    output_file = person_folder / "–ü—Ä–æ–∂–∏—Ç–æ—á–Ω—ã–π –º–∏–Ω–∏–º—É–º.json"

    # --- –ù–û–í–´–ô –ë–õ–û–ö: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–µ—à–µ–Ω–∏—è ---
    decision_date = None
    if not info_file.exists():
        print(f"‚ö†Ô∏è  –§–∞–π–ª '{info_file.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å '–î–∞—Ç—É —Ä–µ—à–µ–Ω–∏—è'. –ó–∞–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        return
    try:
        with open(info_file, 'r', encoding='utf-8') as f:
            info_data = json.load(f)
            decision_date = info_data.get("–î–∞—Ç–∞ —Ä–µ—à–µ–Ω–∏—è")
            if not decision_date:
                print(f"‚ùå –í —Ñ–∞–π–ª–µ '{info_file.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ '–î–∞—Ç–∞ —Ä–µ—à–µ–Ω–∏—è'. –ó–∞–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                return
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ —Ä–µ—à–µ–Ω–∏—è: {decision_date}")
    except (json.JSONDecodeError, Exception) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ '{info_file.name}': {e}. –ó–∞–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        return
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

    if not income_file.exists():
        print(f"‚ùå –§–∞–π–ª '{income_file.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump({}, f)
        print(f"‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª: {output_file.name}")
        return

    try:
        with open(income_file, 'r', encoding='utf-8') as f:
            income_data = json.load(f)
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ '{income_file.name}'.")
        return

    source_of_receipt = income_data.get("source_of_receipt", "")
    current_date = datetime.now().strftime("%d.%m.%Y")

    prompt = ""
    # –¢–µ–ø–µ—Ä—å decision_date –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–±–æ–∏—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö
    if "–∑–∞—Ä–ø–ª–∞—Ç–∞" in source_of_receipt.lower():
        print("‚ÑπÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–æ—Ö–æ–¥ '–∑–∞—Ä–ø–ª–∞—Ç–∞'. –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –ø–æ —Ä–µ–≥–∏–æ–Ω—É.")
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.
–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–∂–∏—Ç–æ—á–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ —Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ ({person_name}) –ø–æ –µ–≥–æ –†–µ–≥–∏–æ–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥ —Å {decision_date} –ø–æ {current_date}?
–ù—É–∂–Ω–æ —É—á–µ—Å—Ç—å –∏ –¥–µ—Ç–µ–π (–µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏—Ö –µ—Å—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö), –Ω–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ–∂–∏—Ç–æ—á–Ω—ã–π –º–∏–Ω–∏–º—É–º –Ω–∞ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ —Ç–æ–º—É –∂–µ –†–µ–≥–∏–æ–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.

–í–µ—Ä–Ω–∏ –û–ë–©–£–Æ –°–£–ú–ú–£ –∑–∞ –≤—Å–µ—Ö –ª—é–¥–µ–π (–≤–∑—Ä–æ—Å–ª—ã–π + –≤—Å–µ –¥–µ—Ç–∏) –∑–∞ –í–ï–°–¨ –£–ö–ê–ó–ê–ù–ù–´–ô –ü–ï–†–ò–û–î.–°—á–∏—Ç–∞–π –Ω–µ –≤ "–≥–æ–ª–æ–≤–µ", –∞ —Å –ø–æ–º–æ—â—å—é python-–∫–æ–¥–∞!

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ```json ```. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON.
2. –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥, –∞ –Ω–µ –∑–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü.
3. –í–µ—Ä–Ω–∏ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤. –î–ª—è –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –¥—Ä–æ–±–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫—É –≤–º–µ—Å—Ç–æ –∑–∞–ø—è—Ç–æ–π.
4. –ù–∞ –¥–µ—Ç–µ–π –∏ –Ω–∞ {person_name} –ø—Ä–æ–∂–∏—Ç–æ—á–Ω—ã–π –º–∏–Ω–∏–º—É–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ –∏—Ö —Ä–µ–≥–∏–æ–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.
5. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ç—è—Ö –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–µ –Ω–µ—Ç, —Ä–∞—Å—Å—á–∏—Ç–∞–π —Ç–æ–ª—å–∫–æ –¥–ª—è {person_name} –ø–æ —Å—Ä–µ–¥–Ω–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –º–∏–Ω–∏–º—É–º—É.

–§–æ—Ä–º–∞—Ç JSON:
{{
"minimum": "–°–£–ú–ú–ê"(–ó–ê –í–°–ï–• –õ–Æ–î–ï–ô!)
}}

–ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
{{
"minimum": "420514.40"
}}
"""
    elif source_of_receipt:
        print("‚ÑπÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞. –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–º–µ—à–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Å—Ä–µ–¥–Ω–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π + —Ä–µ–≥–∏–æ–Ω).")
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.
–ö–∞–∫–æ–π —Å—Ä–µ–¥–Ω–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–∂–∏—Ç–æ—á–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ –¥–ª—è —Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ ({person_name}) –≤ –ø–µ—Ä–∏–æ–¥ —Å {decision_date} –ø–æ {current_date}?
–¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –∏ –¥–µ—Ç–µ–π (–µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏—Ö –µ—Å—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö). –ù–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ–∂–∏—Ç–æ—á–Ω—ã–π –º–∏–Ω–∏–º—É–º –Ω–∞ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∏—Ö –†–µ–≥–∏–æ–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.

–í–µ—Ä–Ω–∏ –û–ë–©–£–Æ –°–£–ú–ú–£ –∑–∞ –≤—Å–µ—Ö –ª—é–¥–µ–π (–≤–∑—Ä–æ—Å–ª—ã–π + –≤—Å–µ –¥–µ—Ç–∏) –∑–∞ –í–ï–°–¨ –£–ö–ê–ó–ê–ù–ù–´–ô –ü–ï–†–ò–û–î.–°—á–∏—Ç–∞–π –Ω–µ –≤ "–≥–æ–ª–æ–≤–µ", –∞ —Å –ø–æ–º–æ—â—å—é python-–∫–æ–¥–∞!

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ```json ```. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON.
2. –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥, –∞ –Ω–µ –∑–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü.
3. –í–µ—Ä–Ω–∏ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤. –î–ª—è –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –¥—Ä–æ–±–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫—É –≤–º–µ—Å—Ç–æ –∑–∞–ø—è—Ç–æ–π.
4. –ù–∞ –¥–µ—Ç–µ–π –ø—Ä–æ–∂–∏—Ç–æ—á–Ω—ã–π –º–∏–Ω–∏–º—É–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ –∏—Ö —Ä–µ–≥–∏–æ–Ω—É, –∞ –Ω–∞ {person_name} ‚Äî –°–†–ï–î–ù–ï–†–û–°–°–ò–ô–°–ö–ò–ô.
5. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ç—è—Ö –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–µ –Ω–µ—Ç, —Ä–∞—Å—Å—á–∏—Ç–∞–π —Ç–æ–ª—å–∫–æ –¥–ª—è {person_name} –ø–æ —Å—Ä–µ–¥–Ω–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –º–∏–Ω–∏–º—É–º—É.

–§–æ—Ä–º–∞—Ç JSON:
{{
"minimum": "–°–£–ú–ú–ê"(–ó–ê –í–°–ï–• –õ–Æ–î–ï–ô!)
}}

–ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
{{
"minimum": "420514.40"
}}
"""
    else:
        print("‚ÑπÔ∏è –ü–æ–ª–µ 'source_of_receipt' –ø—É—Å—Ç–æ–µ. –ó–∞–ø—Ä–æ—Å –∫ AI –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump({}, f)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª: {output_file.name}")
        return

    # --- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ API (—ç—Ç–æ—Ç –±–ª–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    pdf_chunks = split_pdf(analysis_pdf)
    if not pdf_chunks:
        return

    uploaded_files = []
    temp_dir = analysis_pdf.parent / "temp_pdf_chunks"

    try:
        # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            future_to_file = {executor.submit(upload_file_with_retry, chunk): chunk for chunk in pdf_chunks}
            for future in concurrent.futures.as_completed(future_to_file):
                uploaded_file = future.result()
                if uploaded_file:
                    uploaded_files.append(uploaded_file)

        if len(uploaded_files) != len(pdf_chunks):
            print("‚ùå –ù–µ –≤—Å–µ —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –ê–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º.")

        if not uploaded_files:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        print(f"üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini ({len(uploaded_files)} —Ñ–∞–π–ª–æ–≤)...")
        response = model.generate_content(uploaded_files + [prompt], request_options={"timeout": 600})
        response_text = response.text.strip()

        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç markdown
        clean_json_str = re.sub(r'```json\s*|```', '', response_text).strip()

        # –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_data = json.loads(clean_json_str)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞
        if "minimum" in result_data:
            try:
                min_value = float(str(result_data["minimum"]).replace(" ", ""))
                result_data["minimum"] = f"{min_value:.2f}"
            except (ValueError, TypeError):
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 'minimum' –≤ —á–∏—Å–ª–æ: {result_data['minimum']}")
                result_data["minimum"] = "0.00"

        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(result_data, f, ensure_ascii=False, indent=4)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        for chunk in pdf_chunks:
            try:
                os.remove(chunk)
            except OSError as e:
                print(f"  > –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {chunk}: {e}")
        try:
            os.rmdir(temp_dir)
        except OSError as e:
            print(f"  > –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É {temp_dir}: {e}")

        for uploaded_file in uploaded_files:
            try:
                genai.delete_file(uploaded_file.name)
            except Exception as e:
                # –û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
                pass
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞."""
    if not setup_environment():
        return

    model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest")
    person_folder = find_person_folder()
    if not person_folder:
        return

    analyze_subsistence_minimum(person_folder, model)


if __name__ == "__main__":
    main()
