import os
import json
from pathlib import Path
import google.generativeai as genai
import time
from PyPDF2 import PdfMerger, PdfReader, PdfWriter
from PIL import Image
import fitz  # PyMuPDF
import concurrent.futures
from threading import Lock

with open('autorization\\proxy.txt', 'r', encoding='utf-8') as file:
    proxy = file.read().split(":")
    PROXY_ADDRESS = proxy[0]
    PROXY_PORT = proxy[1]
    PROXY_LOGIN = proxy[2]
    PROXY_PASSWORD = proxy[3]
with open('autorization\\API_GEMINI.txt', 'r', encoding='utf-8') as file:
    GOOGLE_API_KEY = file.read()


def setup_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏ API-–∫–ª—é—á –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
    try:
        if PROXY_ADDRESS:
            proxy_url = f"http://{PROXY_LOGIN}:{PROXY_PASSWORD}@{PROXY_ADDRESS}:{PROXY_PORT}"
            os.environ['HTTPS_PROXY'] = proxy_url
            os.environ['HTTP_PROXY'] = proxy_url
            print(f"üöÄ –ü—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {PROXY_ADDRESS}:{PROXY_PORT}")

        genai.configure(api_key=GOOGLE_API_KEY)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google AI –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def find_person_folder():
    """–ù–∞—Ö–æ–¥–∏—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'People'."""
    people_dir = Path("People")
    if not people_dir.is_dir():
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{people_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return None

    subdirectories = [d for d in people_dir.iterdir() if d.is_dir()]
    if len(subdirectories) == 1:
        return subdirectories[0]
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: –í–Ω—É—Ç—Ä–∏ '{people_dir}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –ø–∞–ø–∫–∞.")
        return None


def convert_image_to_pdf(image_path, output_pdf_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF."""
    try:
        with Image.open(image_path) as img:
            if img.mode != 'RGB':
                img = img.convert('RGB')
            img.save(output_pdf_path, "PDF", resolution=100.0)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {image_path}: {e}")
        return False


def merge_and_split_documents(person_folder):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ PDF –∏ JPEG —Ñ–∞–π–ª—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 50 —Å—Ç—Ä–∞–Ω–∏—Ü."""
    materials_folder = person_folder / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞"
    analysis_folder = person_folder / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ –ê–Ω–∞–ª–∏–∑"

    if not materials_folder.is_dir():
        print(f"‚ùå –ü–∞–ø–∫–∞ '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {person_folder}")
        return False

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analysis_folder.mkdir(exist_ok=True)

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    pdf_files = list(materials_folder.glob("*.pdf"))
    image_files = list(materials_folder.glob("*.jpg")) + list(materials_folder.glob("*.jpeg"))

    if not pdf_files and not image_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ PDF –∏–ª–∏ JPEG —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞'")
        return False

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF
    temp_pdfs = []
    for image_file in image_files:
        temp_pdf_path = analysis_folder / f"temp_{image_file.stem}.pdf"
        if convert_image_to_pdf(image_file, temp_pdf_path):
            temp_pdfs.append(temp_pdf_path)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã
    merger = PdfMerger()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ PDF
    for pdf_file in pdf_files:
        try:
            merger.append(str(pdf_file))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {pdf_file}: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for temp_pdf in temp_pdfs:
        try:
            merger.append(str(temp_pdf))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ PDF: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π PDF
    merged_pdf_path = analysis_folder / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞.pdf"
    try:
        merger.write(str(merged_pdf_path))
        merger.close()
        print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π PDF —Å–æ–∑–¥–∞–Ω: {merged_pdf_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ PDF: {e}")
        return False

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ PDF —Ñ–∞–π–ª—ã
    for temp_pdf in temp_pdfs:
        try:
            temp_pdf.unlink()
        except:
            pass

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 50 —Å—Ç—Ä–∞–Ω–∏—Ü
    try:
        with open(merged_pdf_path, 'rb') as file:
            reader = PdfReader(file)
            total_pages = len(reader.pages)

            part_number = 1
            for start_page in range(0, total_pages, 50):
                end_page = min(start_page + 50, total_pages)

                writer = PdfWriter()
                for page_num in range(start_page, end_page):
                    writer.add_page(reader.pages[page_num])

                part_filename = analysis_folder / f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ {part_number}.pdf"
                with open(part_filename, 'wb') as output_file:
                    writer.write(output_file)

                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —á–∞—Å—Ç—å {part_number}: {end_page - start_page} —Å—Ç—Ä–∞–Ω–∏—Ü")
                part_number += 1

        print(f"‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {part_number - 1} —á–∞—Å—Ç–µ–π")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ PDF: {e}")
        return False


def upload_file_wrapper(pdf_part):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        print(f"  > –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ '{pdf_part.name}'...")
        uploaded_file = genai.upload_file(path=pdf_part)
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        return uploaded_file
    except Exception as e:
        print(f"  > ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '{pdf_part.name}': {e}")
        return None


def analyze_property(person_folder, model):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–º—É—â–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫–∞."""
    analysis_folder = person_folder / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ –ê–Ω–∞–ª–∏–∑"
    person_name = person_folder.name

    if not analysis_folder.is_dir():
        print(f"‚ùå –ü–∞–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {analysis_folder}")
        return None

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–µ–ª–∞
    pdf_parts = sorted(analysis_folder.glob("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ *.pdf"))

    if not pdf_parts:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–µ–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return None

    print(f"üîç –ê–Ω–∞–ª–∏–∑ –∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è: {person_name}")

    uploaded_files = []
    try:
        # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ (–ø–æ 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            future_to_file = {executor.submit(upload_file_wrapper, pdf_part): pdf_part for pdf_part in pdf_parts}

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for future in concurrent.futures.as_completed(future_to_file):
                pdf_part = future_to_file[future]
                try:
                    uploaded_file = future.result()
                    if uploaded_file:
                        uploaded_files.append(uploaded_file)
                        print(f"  > ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {pdf_part.name}")
                except Exception as e:
                    print(f"  > ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {pdf_part.name}: {e}")

        if not uploaded_files:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            return None

        prompt_text = f"""
–ï—Å—Ç—å –ª–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º —É {person_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ? 
–û—Ç–¥–µ–ª–∏ –î–≤–∏–∂–∏–º–æ–µ, –ù–µ–¥–≤–∏–∂–∏–º–æ–µ, –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.
–¢–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å(–≤ —Ä—É–±–ª—è—Ö!) –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–º! 
–û–ø—Ä–µ–¥–µ–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ (–¥–ª—è –Ω–µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –Ω—É–∂–Ω–∞! –ò –∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ–º—É –∏–º—É—â–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ!)

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ```json ```. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON.

–§–æ—Ä–º–∞—Ç JSON:
{{
  "only_accommodation": "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ –∏–ª–∏ -",
  "immovable_property": "–ù–µ–¥–≤–∏–∂–∏–º–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ -",
  "immovable_property_price": "–¶–µ–Ω—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ -",
  "movable_property": "–î–≤–∏–∂–∏–º–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ -",
  "movable_property_price": "–¶–µ–Ω—ã –¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ -",
  "cash_property": "–î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ -",
  "cash_property_price": "–°—É–º–º—ã –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ -"
}}

–ü–†–ê–í–ò–õ–ê:
1. –î–ª—è —Ü–µ–Ω –ø–∏—à–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –¥—Ä–æ–±–µ–π –≤–º–µ—Å—Ç–æ –∑–∞–ø—è—Ç–æ–π –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫—É! (–Ω–∞–ø—Ä–∏–º–µ—Ä 7806.27)
2. –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø–µ—Ä–µ—á–∏—Å–ª—è–π —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, —Ü–µ–Ω—ã —Ç–æ–∂–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ
3. –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–π '-' (–∏ –¥–ª—è —Å—É–º–º—ã —Ç–æ–∂–µ!)
4. –î–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∂–∏–ª—å—è —É–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ, –±–µ–∑ —Ü–µ–Ω—ã
5. –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ –¥–µ—Ç–∞–ª—è–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö!

–ø—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
{{
  "only_accommodation": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É –≥. –í–æ—Ä–æ–Ω–µ–∂, —É–ª. –Æ–∂–Ω–æ-–ú–æ—Ä–∞–≤—Å–∫–∞—è, –¥. 12, –∫–≤. 14.",
  "immovable_property": "–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º –ø–æ –∞–¥—Ä–µ—Å—É –≥. –î–æ–Ω–µ—Ü, —É–ª. –í–∞—Ä—à–≤–∞—Å–∫–∞—è –¥. 16",
  "immovable_property_price": "1300000",
  "movable_property": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å Mazda 1998, –ê–≤—Ç–æ–º–æ–±–∏–ª—å Kia Rio 2016",
  "movable_property_price": "350000, 1200000",
  "cash_property": "-",
  "cash_property_price": "-"
}}
"""

        print("  > –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤...")
        response = model.generate_content(uploaded_files + [prompt_text], request_options={"timeout": 600})
        response_text = response.text.strip()

        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if response_text.startswith('```json'):
            response_text = response_text.replace('```json', '').replace('```', '').strip()
        elif response_text.startswith('```'):
            response_text = response_text.replace('```', '').strip()

        return json.loads(response_text)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–º—É—â–µ—Å—Ç–≤–∞: {e}")
        return None

    finally:
        # –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for uploaded_file in uploaded_files:
            try:
                genai.delete_file(uploaded_file.name)
            except:
                pass


def main():
    if not setup_environment():
        return

    model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest")
    person_folder = find_person_folder()
    if not person_folder:
        return

    # –®–∞–≥ 1: –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞
    print("üìÇ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Ä–∞–∑–±–∏–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–µ–ª–∞...")
    if not merge_and_split_documents(person_folder):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞")
        return

    # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—É—â–µ—Å—Ç–≤–æ
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –∏–º—É—â–µ—Å—Ç–≤–∞...")
    property_analysis = analyze_property(person_folder, model)

    if property_analysis and isinstance(property_analysis, dict):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        property_file = person_folder / "–ò–º—É—â–µ—Å—Ç–≤–æ.json"
        with open(property_file, "w", encoding="utf-8") as f:
            json.dump(property_analysis, f, ensure_ascii=False, indent=4)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–º—É—â–µ—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {property_file}")

        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–º—É—â–µ—Å—Ç–≤–∞:")
        for key, value in property_analysis.items():
            print(f"  {key}: {value}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ")


if __name__ == "__main__":
    main()