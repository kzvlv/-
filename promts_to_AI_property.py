import os
import json
from pathlib import Path
import google.generativeai as genai
import time
from PyPDF2 import PdfMerger, PdfReader, PdfWriter
from PIL import Image
import fitz  # PyMuPDF
import concurrent.futures
from datetime import datetime
import re
import threading

with open('autorization\\proxy.txt', 'r', encoding='utf-8') as file:
    proxy = file.read().split(":")
    PROXY_ADDRESS = proxy[0]
    PROXY_PORT = proxy[1]
    PROXY_LOGIN = proxy[2]
    PROXY_PASSWORD = proxy[3]
with open('autorization\\API_GEMINI.txt', 'r', encoding='utf-8') as file:
    GOOGLE_API_KEY = file.read()


def setup_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏ API-–∫–ª—é—á –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
    try:
        if PROXY_ADDRESS:
            proxy_url = f"http://{PROXY_LOGIN}:{PROXY_PASSWORD}@{PROXY_ADDRESS}:{PROXY_PORT}"
            os.environ['HTTPS_PROXY'] = proxy_url
            os.environ['HTTP_PROXY'] = proxy_url
            print(f"üöÄ –ü—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {PROXY_ADDRESS}:{PROXY_PORT}")

        genai.configure(api_key=GOOGLE_API_KEY)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google AI –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def find_person_folder():
    """–ù–∞—Ö–æ–¥–∏—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'People'."""
    people_dir = Path("People")
    if not people_dir.is_dir():
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{people_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return None

    subdirectories = [d for d in people_dir.iterdir() if d.is_dir()]
    if len(subdirectories) == 1:
        return subdirectories[0]
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: –í–Ω—É—Ç—Ä–∏ '{people_dir}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –ø–∞–ø–∫–∞.")
        return None


def convert_image_to_pdf(image_path, output_pdf_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF."""
    try:
        with Image.open(image_path) as img:
            if img.mode != 'RGB':
                img = img.convert('RGB')
            img.save(output_pdf_path, "PDF", resolution=100.0)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {image_path}: {e}")
        return False


def upload_file_with_retry(pdf_part, max_retries=3):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö."""
    for attempt in range(max_retries):
        try:
            print(f"  > –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ '{pdf_part.name}'...")
            uploaded_file = genai.upload_file(path=pdf_part)
            time.sleep(1)
            return uploaded_file
        except Exception as e:
            print(f"  > ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '{pdf_part.name}' (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    return None


def extract_relevant_pages_parallel(person_folder, model):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å '–¥—Ä' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π)."""
    materials_folder = person_folder / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞"
    person_name = person_folder.name

    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã —Å '–¥—Ä' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    dr_files = []
    for pattern in ["*–¥—Ä*", "*–î—Ä*", "*–î–†*", "*–¥—Ä—É–≥–∏–µ*", "*–î—Ä—É–≥–∏–µ*", "*–î–†–£–ì–ò–ï*"]:
        dr_files.extend(list(materials_folder.glob(f"{pattern}.pdf")))
        dr_files.extend(list(materials_folder.glob(f"{pattern}.jpg")))
        dr_files.extend(list(materials_folder.glob(f"{pattern}.jpeg")))

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    dr_files = list(set(dr_files))

    if not dr_files:
        print("üìÑ –§–∞–π–ª—ã —Å '–¥—Ä' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return []

    print(f"üîç –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å '–¥—Ä': {[f.name for f in dr_files]}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    files_to_process = []
    for dr_file in dr_files:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if dr_file.suffix.lower() in ['.jpg', '.jpeg']:
            temp_pdf = materials_folder / f"temp_{dr_file.stem}.pdf"
            if convert_image_to_pdf(dr_file, temp_pdf):
                files_to_process.append(temp_pdf)
        else:
            files_to_process.append(dr_file)

    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    relevant_pages_files = []
    lock = threading.Lock()

    def process_file_wrapper(file_path):
        nonlocal relevant_pages_files
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            with open(file_path, 'rb') as f:
                reader = PdfReader(f)
                total_pages = len(reader.pages)
                print(f"  üìä –§–∞–π–ª {file_path.name}: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")

                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 50 —Å—Ç—Ä–∞–Ω–∏—Ü, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                if total_pages > 50:
                    print(f"  ‚úÇÔ∏è  –§–∞–π–ª {file_path.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏...")
                    parts = split_pdf_into_parts(file_path, 50)
                    for part_file in parts:
                        result = process_dr_file_with_retry(part_file, person_name, model)
                        with lock:
                            relevant_pages_files.extend(result)
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–∞—Å—Ç–∏
                        try:
                            part_file.unlink()
                        except:
                            pass
                else:
                    result = process_dr_file_with_retry(file_path, person_name, model)
                    with lock:
                        relevant_pages_files.extend(result)

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path.name}: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if file_path.name.startswith("temp_"):
            try:
                file_path.unlink()
            except:
                pass

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
        executor.map(process_file_wrapper, files_to_process)

    return relevant_pages_files


def process_dr_file_with_retry(pdf_file, person_name, model, max_retries=3):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å '–¥—Ä' —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    for attempt in range(max_retries):
        try:
            return process_dr_file(pdf_file, person_name, model)
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {pdf_file.name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(2)
    return []


def process_dr_file(pdf_file, person_name, model):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å '–¥—Ä' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    try:
        print(f"  üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {pdf_file.name}")
        uploaded_file = upload_file_with_retry(pdf_file)
        if not uploaded_file:
            return []

        prompt_text = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π PDF-–¥–æ–∫—É–º–µ–Ω—Ç. –í –¥–æ–∫—É–º–µ–Ω—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–Ω—ã—Ö –ª—é–¥—è—Ö.
–ù–∞–π–¥–∏ –í–°–ï —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —á–µ–ª–æ–≤–µ–∫—É —Å –§–ò–û: {person_name}

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø–æ—è—Å–Ω–µ–Ω–∏–π.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{{
  "relevant_pages": [–Ω–æ–º–µ—Ä–∞_—Å—Ç—Ä–∞–Ω–∏—Ü_—á–µ—Ä–µ–∑_–∑–∞–ø—è—Ç—É—é]
}}

–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 5, 8 –∏ 12 –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ {person_name}:
{{
  "relevant_pages": [5, 8, 12]
}}

–ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ {person_name}, –≤–µ—Ä–Ω–∏:
{{
  "relevant_pages": []
}}

–ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1!
"""

        response = model.generate_content([uploaded_file, prompt_text], request_options={"timeout": 300})
        response_text = response.text.strip().replace("```json", "").replace("```", "").strip()

        result = json.loads(response_text)
        relevant_pages = result.get("relevant_pages", [])

        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {len(relevant_pages)}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        extracted_pages = extract_pages_from_pdf(pdf_file, relevant_pages, person_name)

        # –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            genai.delete_file(uploaded_file.name)
        except:
            pass

        return extracted_pages

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ {pdf_file.name}: {e}")
        return []


def split_pdf_into_parts(pdf_path, pages_per_part):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç PDF –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–∞–Ω–∏—Ü."""
    parts = []
    try:
        with open(pdf_path, 'rb') as file:
            reader = PdfReader(file)
            total_pages = len(reader.pages)

            part_number = 1
            for start_page in range(0, total_pages, pages_per_part):
                end_page = min(start_page + pages_per_part, total_pages)

                writer = PdfWriter()
                for page_num in range(start_page, end_page):
                    writer.add_page(reader.pages[page_num])

                part_filename = pdf_path.parent / f"{pdf_path.stem}_part{part_number}.pdf"
                with open(part_filename, 'wb') as output_file:
                    writer.write(output_file)

                parts.append(part_filename)
                part_number += 1

        return parts
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ PDF: {e}")
        return []


def extract_pages_from_pdf(pdf_path, page_numbers, person_name):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ PDF –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º."""
    if not page_numbers:
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        try:
            pdf_path.unlink()
            print(f"  üóëÔ∏è  –£–¥–∞–ª–µ–Ω –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ñ–∞–π–ª: {pdf_path.name}")
        except:
            pass
        return []

    try:
        with open(pdf_path, 'rb') as file:
            reader = PdfReader(file)
            writer = PdfWriter()

            for page_num in page_numbers:
                # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ PyPDF2 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
                if 0 <= page_num - 1 < len(reader.pages):
                    writer.add_page(reader.pages[page_num - 1])

            if len(writer.pages) > 0:
                output_filename = pdf_path.parent / f"{person_name}_—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ_{pdf_path.stem}.pdf"
                with open(output_filename, 'wb') as output_file:
                    writer.write(output_file)

                print(f"  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(writer.pages)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤: {output_filename.name}")
                return [output_filename]

        return []
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
        return []


def merge_all_documents(person_folder, relevant_pages_files):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∫–ª—é—á–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ '–¥—Ä' —Ñ–∞–π–ª–æ–≤."""
    materials_folder = person_folder / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞"
    analysis_folder = person_folder / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ –ê–Ω–∞–ª–∏–∑"

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analysis_folder.mkdir(exist_ok=True)

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–∞–∫ '–¥—Ä')
    all_files = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ '–¥—Ä' —Ñ–∞–π–ª–æ–≤
    all_files.extend(relevant_pages_files)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–±–µ–∑ '–¥—Ä' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)
    for pattern in ["*.pdf", "*.jpg", "*.jpeg"]:
        for file_path in materials_folder.glob(pattern):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å '–¥—Ä' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Ö —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
            filename_lower = file_path.name.lower()
            if not any(keyword in filename_lower for keyword in ['–¥—Ä', '–¥—Ä—É–≥–∏–µ']):
                all_files.append(file_path)

    if not all_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return False

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF
    pdf_files = []
    for file_path in all_files:
        if file_path.suffix.lower() in ['.jpg', '.jpeg']:
            temp_pdf_path = analysis_folder / f"temp_{file_path.stem}.pdf"
            if convert_image_to_pdf(file_path, temp_pdf_path):
                pdf_files.append(temp_pdf_path)
        else:
            pdf_files.append(file_path)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã
    merger = PdfMerger()

    for pdf_file in pdf_files:
        try:
            merger.append(str(pdf_file))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {pdf_file}: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π PDF
    merged_pdf_path = analysis_folder / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞.pdf"
    try:
        merger.write(str(merged_pdf_path))
        merger.close()
        print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π PDF —Å–æ–∑–¥–∞–Ω: {merged_pdf_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ PDF: {e}")
        return False

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ PDF —Ñ–∞–π–ª—ã
    for pdf_file in pdf_files:
        if pdf_file.name.startswith("temp_"):
            try:
                pdf_file.unlink()
            except:
                pass

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 50 —Å—Ç—Ä–∞–Ω–∏—Ü
    try:
        with open(merged_pdf_path, 'rb') as file:
            reader = PdfReader(file)
            total_pages = len(reader.pages)

            part_number = 1
            for start_page in range(0, total_pages, 50):
                end_page = min(start_page + 50, total_pages)

                writer = PdfWriter()
                for page_num in range(start_page, end_page):
                    writer.add_page(reader.pages[page_num])

                part_filename = analysis_folder / f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ {part_number}.pdf"
                with open(part_filename, 'wb') as output_file:
                    writer.write(output_file)

                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —á–∞—Å—Ç—å {part_number}: {end_page - start_page} —Å—Ç—Ä–∞–Ω–∏—Ü")
                part_number += 1

        print(f"‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {part_number - 1} —á–∞—Å—Ç–µ–π")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ PDF: {e}")
        return False


def get_decision_date(person_folder):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Ä–µ—à–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.json."""
    info_file = person_folder / "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.json"
    if not info_file.exists():
        print(f"‚ùå –§–∞–π–ª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {person_folder}")
        return None

    try:
        with open(info_file, 'r', encoding='utf-8') as f:
            info_data = json.load(f)
            decision_date = info_data.get("–î–∞—Ç–∞ —Ä–µ—à–µ–Ω–∏—è")
            if decision_date:
                print(f"‚úÖ –î–∞—Ç–∞ —Ä–µ—à–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {decision_date}")
                return decision_date
            else:
                print("‚ùå –ü–æ–ª–µ '–î–∞—Ç–∞ —Ä–µ—à–µ–Ω–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.json: {e}")
        return None


def analyze_property(person_folder, model, uploaded_files):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–º—É—â–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫–∞."""
    person_name = person_folder.name

    print(f"üîç –ê–Ω–∞–ª–∏–∑ –∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è: {person_name}")

    try:
        prompt_text = f"""
–ï—Å—Ç—å –ª–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º —É {person_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ? 
–û—Ç–¥–µ–ª–∏ –î–≤–∏–∂–∏–º–æ–µ, –ù–µ–¥–≤–∏–∂–∏–º–æ–µ, –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞(–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ)! 
–¢–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å(–≤ —Ä—É–±–ª—è—Ö!) –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–º! 
–û–ø—Ä–µ–¥–µ–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ (–¥–ª—è –Ω–µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –Ω—É–∂–Ω–∞! –ò –∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ–º—É –∏–º—É—â–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ!)
–ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, —Ç–æ —É –Ω–µ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–º!

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ```json ```. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON.

–§–æ—Ä–º–∞—Ç JSON:
{{
  "only_accommodation": "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ –∏–ª–∏ -",
  "immovable_property": "–ù–µ–¥–≤–∏–∂–∏–º–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ –∏–ª–∏ -",
  "immovable_property_price": "–¶–µ–Ω—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ -",
  "movable_property": "–î–≤–∏–∂–∏–º–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ –∏–ª–∏ -",
  "movable_property_price": "–¶–µ–Ω—ã –¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ -",
  "cash_property": "–î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–ª–∏ -",
  "cash_property_price": "–°—É–º–º—ã –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ -"
}}

–ü–†–ê–í–ò–õ–ê:
1. –î–ª—è —Ü–µ–Ω –ø–∏—à–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –¥—Ä–æ–±–µ–π –≤–º–µ—Å—Ç–æ –∑–∞–ø—è—Ç–æ–π –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫—É! (–Ω–∞–ø—Ä–∏–º–µ—Ä 7806.27)
2. –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø–µ—Ä–µ—á–∏—Å–ª—è–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —Ü–µ–Ω—ã —Ç–æ–∂–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ
3. –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–π '-' (–∏ –¥–ª—è —Å—É–º–º—ã —Ç–æ–∂–µ!)
4. –î–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∂–∏–ª—å—è —É–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ, –±–µ–∑ —Ü–µ–Ω—ã
5. –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ –¥–µ—Ç–∞–ª—è–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö!

–ø—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
{{
  "only_accommodation": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É –≥. –í–æ—Ä–æ–Ω–µ–∂, —É–ª. –Æ–∂–Ω–æ-–ú–æ—Ä–∞–≤—Å–∫–∞—è, –¥. 12, –∫–≤. 14.",
  "immovable_property": "–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º –ø–æ –∞–¥—Ä–µ—Å—É –≥. –î–æ–Ω–µ—Ü, —É–ª. –í–∞—Ä—à–≤–∞—Å–∫–∞—è –¥. 16",
  "immovable_property_price": "1300000",
  "movable_property": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å Mazda 1998, –ê–≤—Ç–æ–º–æ–±–∏–ª—å Kia Rio 2016",
  "movable_property_price": "350000, 1200000",
  "cash_property": "-",
  "cash_property_price": "-"
}}
"""

        print("  > –ê–Ω–∞–ª–∏–∑ –∏–º—É—â–µ—Å—Ç–≤–∞...")
        response = model.generate_content(uploaded_files + [prompt_text], request_options={"timeout": 600})
        response_text = response.text.strip()

        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if response_text.startswith('```json'):
            response_text = response_text.replace('```json', '').replace('```', '').strip()
        elif response_text.startswith('```'):
            response_text = response_text.replace('```', '').strip()

        return json.loads(response_text)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–º—É—â–µ—Å—Ç–≤–∞: {e}")
        return None


def analyze_income(person_folder, model, uploaded_files):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Ö–æ–¥—ã —á–µ–ª–æ–≤–µ–∫–∞."""
    person_name = person_folder.name
    decision_date = get_decision_date(person_folder)

    if not decision_date:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Ö–æ–¥–æ–≤")
        return None

    current_date = datetime.now().strftime("%d.%m.%Y")

    print(f"üí∞ –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è: {person_name} (–ø–µ—Ä–∏–æ–¥: {decision_date} - {current_date})")

    try:
        prompt_text = f"""
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô –∏ –ù–ï –ì–ï–ù–ï–†–ò–†–£–ô –¥–∞–Ω–Ω—ã–µ!
–ï—Å—Ç—å –ª–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º —É {person_name} –¥–æ—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {decision_date} –ø–æ {current_date}?
–ú–Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ –¥–∞—Ç—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π, –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è(–õ–∏–±–æ –∑–∞—Ä–ø–ª–∞—Ç–∞, –ª–∏–±–æ –ø–µ–Ω—Å–∏—è, –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç), –∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è. –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –≤—ã—Å—á–∏—Ç–∞—Ç—å –ò—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–æ–≤. –ù–µ —Å—á–∏—Ç–∞–π –≤ "–≥–æ–ª–æ–≤–µ", –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π python-–∫–æ–¥.
–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π!


–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ```json ```. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON.

–§–æ—Ä–º–∞—Ç JSON:
{{
  "date of receipt": "–¥–∞—Ç—ã —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π",
  "source of receipt": "–∏—Å—Ç–æ—á–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π",
  "amount of the receipt": "—Å—É–º–º—ã —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π",
  "total": "–æ–±—â–∞—è —Å—É–º–º–∞"
}}

–ï—Å–ª–∏ –¥–æ—Ö–æ–¥–∞ –Ω–µ –±—ã–ª–æ –≤–æ–æ–±—â–µ –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π json:
{{}}


–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –£–∫–∞–∑—ã–≤–∞–π –¢–û–õ–¨–ö–û —Ç–µ –¥–æ—Ö–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
2. –ï—Å–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö - –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π JSON {{}}
3. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –¥–∞—Ç—ã, —Å—É–º–º—ã –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞
4. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–∞—è –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞—è - —É–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
5. –î–æ–∫—É–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö - —É—á–∏—Ç—ã–≤–∞–π —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
6. –í —á–∏—Å–ª–∞—Ö —É–±–∏—Ä–∞–π –ø—Ä–æ–±–µ–ª—ã, –¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –¥—Ä–æ–±–µ–π –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫—É –≤–º–µ—Å—Ç–æ –∑–∞–ø—è—Ç–æ–π!
7. –ò—Å—Ç–æ—á–Ω–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ "–∑–∞—Ä–ø–ª–∞—Ç–∞" –∏–ª–∏ "–ø–µ–Ω—Å–∏—è"
8. –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã –∏—Å–ø–æ–ª—å–∑—É–π python-–∫–æ–¥, –Ω–µ —Å—á–∏—Ç–∞–π –≤—Ä—É—á–Ω—É—é
9. –í—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ JSON
10. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º–æ–≥—É—Ç –ø–æ–ø–∞—Å—Ç—å—Å—è –¥—É–±–ª–∏–∫–∞—Ç—ã(–∞–±—Å–æ–ª—é—Ç–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–≤–µ–¥–µ–Ω–∏—è). –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —É—á—Ç–∏ —ç—Ç–æ –∏ –Ω–µ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–≤–∞–∂–¥—ã! 
11. –ù–ï–°–ö–û–õ–¨–ö–ò–• –î–û–•–û–î–û–í –û–¢ –û–î–ù–û–ô –î–ê–¢–´ –ë–´–¢–¨ –ù–ï –ú–û–ñ–ï–¢!

–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ:
- –∑–∞—Ä–ø–ª–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞)
- –ø–µ–Ω—Å–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∫–∞–∫ –ø–µ–Ω—Å–∏—è)

–ø—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
{{
  "date of receipt": "28.02.2025; 31.03.2025",
  "source of receipt": "–∑–∞—Ä–ø–ª–∞—Ç–∞; –∑–∞—Ä–ø–ª–∞—Ç–∞",
  "amount of the receipt": "31126.44; 33412.22",
  "total": "64538.66"
}}
"""

        print("  > –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤...")
        response = model.generate_content(uploaded_files + [prompt_text], request_options={"timeout": 600})
        response_text = response.text.strip()

        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if response_text.startswith('```json'):
            response_text = response_text.replace('```json', '').replace('```', '').strip()
        elif response_text.startswith('```'):
            response_text = response_text.replace('```', '').strip()

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ {}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π dict
        if response_text.strip() in ['', '{}', '{{}}']:
            print("  üí° –î–æ—Ö–æ–¥—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
            return {}

        result = json.loads(response_text)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –¥–∞—Ç—ã —è–≤–Ω–æ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –≤—ã–¥—É–º–∞–Ω–Ω—ã–µ
        dates = result.get("date of receipt", "").split(";")
        if len(dates) > 12:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 12 –∑–∞–ø–∏—Å–µ–π - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–Ω–æ–≥–æ
            print("  ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ –¥–æ—Ö–æ–¥–∞—Ö")
            print("  ‚ö†Ô∏è  –í–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –∞–Ω–∞–ª–∏–∑–∞")
            return {}

        return result

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ—Ö–æ–¥–æ–≤: {e}")
        return None


def main():
    if not setup_environment():
        return

    model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest")
    person_folder = find_person_folder()
    if not person_folder:
        return

    person_name = person_folder.name

    # –®–∞–≥ 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å '–¥—Ä' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è)
    print("üîç –ü–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å '–¥—Ä' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏...")
    relevant_pages_files = extract_relevant_pages_parallel(person_folder, model)

    # –®–∞–≥ 2: –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–≤–∫–ª—é—á–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ '–¥—Ä' —Ñ–∞–π–ª–æ–≤)
    print("\nüìÇ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    if not merge_all_documents(person_folder, relevant_pages_files):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞")
        return

    analysis_folder = person_folder / "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ –ê–Ω–∞–ª–∏–∑"
    pdf_parts = sorted(analysis_folder.glob("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ *.pdf"))

    if not pdf_parts:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–µ–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    uploaded_files = []
    try:
        # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ (–ø–æ 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            future_to_file = {executor.submit(upload_file_with_retry, pdf_part): pdf_part for pdf_part in pdf_parts}

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for future in concurrent.futures.as_completed(future_to_file):
                pdf_part = future_to_file[future]
                try:
                    uploaded_file = future.result()
                    if uploaded_file:
                        uploaded_files.append(uploaded_file)
                        print(f"  > ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {pdf_part.name}")
                except Exception as e:
                    print(f"  > ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {pdf_part.name}: {e}")

        if not uploaded_files:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            return

        # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—É—â–µ—Å—Ç–≤–æ
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –∏–º—É—â–µ—Å—Ç–≤–∞...")
        property_analysis = analyze_property(person_folder, model, uploaded_files)

        if property_analysis and isinstance(property_analysis, dict):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            property_file = person_folder / "–ò–º—É—â–µ—Å—Ç–≤–æ.json"
            with open(property_file, "w", encoding="utf-8") as f:
                json.dump(property_analysis, f, ensure_ascii=False, indent=4)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–º—É—â–µ—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {property_file}")

            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–º—É—â–µ—Å—Ç–≤–∞:")
            for key, value in property_analysis.items():
                print(f"  {key}: {value}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ")

        # –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥—ã
        print("\nüí∞ –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤...")
        income_analysis = analyze_income(person_folder, model, uploaded_files)

        if income_analysis is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            income_file = person_folder / "–î–æ—Ö–æ–¥—ã.json"
            with open(income_file, "w", encoding="utf-8") as f:
                json.dump(income_analysis, f, ensure_ascii=False, indent=4)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Ö–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {income_file}")

            if income_analysis:
                print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Ö–æ–¥–æ–≤:")
                for key, value in income_analysis.items():
                    print(f"  {key}: {value}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                dates = income_analysis.get("date of receipt", "").split(";")
                if len(dates) > 12:
                    print("  üö® –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ –¥–æ—Ö–æ–¥–∞—Ö!")
                    print("  üö® –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                    print("  üö® –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ä—É—á–Ω—É—é")
            else:
                print("  üí° –î–æ—Ö–æ–¥—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    finally:
        # –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω—Ü–µ
        for uploaded_file in uploaded_files:
            try:
                genai.delete_file(uploaded_file.name)
            except:
                pass


if __name__ == "__main__":
    main()