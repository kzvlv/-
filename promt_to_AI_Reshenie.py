# –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞—à–µ–º—É –æ—Ç–∫—Ä—ã—Ç–∏—é.
# –ö–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: genai.configure() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ü–û–°–õ–ï —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏.

import os
import json
from pathlib import Path
import google.generativeai as genai
import time


with open('autorization\\proxy.txt', 'r', encoding='utf-8') as file:
    proxy = file.read().split(":")
    PROXY_ADDRESS = proxy[0]
    PROXY_PORT = proxy[1]
    PROXY_LOGIN = proxy[2]
    PROXY_PASSWORD = proxy[3]
with open('autorization\\API_GEMINI.txt', 'r', encoding='utf-8') as file:
    GOOGLE_API_KEY = file.read()



# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---

def setup_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏ API-–∫–ª—é—á –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
    try:
        if PROXY_ADDRESS:
            proxy_url = f"http://{PROXY_LOGIN}:{PROXY_PASSWORD}@{PROXY_ADDRESS}:{PROXY_PORT}"
            # 1. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
            os.environ['HTTPS_PROXY'] = proxy_url
            os.environ['HTTP_PROXY'] = proxy_url
            print(f"üöÄ –ü—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {PROXY_ADDRESS}:{PROXY_PORT}")

        # 2. –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        genai.configure(api_key=GOOGLE_API_KEY)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google AI –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def find_person_folder():
    """–ù–∞—Ö–æ–¥–∏—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'People'."""
    people_dir = Path("People")
    if not people_dir.is_dir():
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{people_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return None

    subdirectories = [d for d in people_dir.iterdir() if d.is_dir()]
    if len(subdirectories) == 1:
        return subdirectories[0]
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: –í–Ω—É—Ç—Ä–∏ '{people_dir}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –ø–∞–ø–∫–∞.")
        return None


def analyze_pdf(pdf_path: Path, model):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω PDF-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"  > –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ '{pdf_path.name}'...")
    uploaded_file = None
    try:
        uploaded_file = genai.upload_file(path=pdf_path)
        print(f"  > –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ê–Ω–∞–ª–∏–∑...")

        prompt_text = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π PDF-–¥–æ–∫—É–º–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–æ—Ä–µ. –í–∞–∂–Ω–æ, —á—Ç–æ –∫ –ù–µ—É—Å—Ç–æ–π–∫–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ–Ω–∏ –∏ —à—Ç—Ä–∞—Ñ—ã, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–ª–≥—É. –¢–∞–∫–∂–µ –í–ê–ñ–ù–û, —á—Ç–æ —Å—É–º–º–∞ –ù–µ—É—Å—Ç–æ–π–∫–∏ –∏ –û—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞ —Ä–∞–≤–Ω–∞ —Å—É–º–º–µ –æ–±—â–µ–≥–æ –¥–æ–ª–≥–∞! –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ 2-–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω –±—É–¥–µ—Ç, –∞ 3-—è –±—É–¥–µ—Ç –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞! –î–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –¥—Ä–æ–±–µ–π –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–¥ –ø–∏—Ç–æ–Ω –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞, –∞ –Ω–µ —Å—á–∏—Ç–∞–π –≤ "–≥–æ–ª–æ–≤–µ"!!!
        –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ```json ```. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON.
        
        –ü—Ä–∏–º–µ—Ä —Ç—Ä–µ–±—É–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
        {
          "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞": "–ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫",
          "–°—É–º–º–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞ 2-–æ–π –æ—á–µ—Ä–µ–¥–∏": "0.00",
          "–°—É–º–º–∞ –Ω–µ—É—Å—Ç–æ–π–∫–∏ 2-–æ–π –æ—á–µ—Ä–µ–¥–∏": "0.00"
          "–°—É–º–º–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞ 3-–µ–π –æ—á–µ—Ä–µ–¥–∏": "15425.23",
          "–°—É–º–º–∞ –Ω–µ—É—Å—Ç–æ–π–∫–∏ 3-–µ–π –æ—á–µ—Ä–µ–¥–∏": "3.1215"
        }
        
        –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∫–∞–∫—É—é-—Ç–æ —Å—É–º–º—É, —É–∫–∞–∂–∏ "0.00".
        –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º.(–ß—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ –ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫ –∏–ª–∏ –û–û–û –ú–ö–ö –§–µ–Ω–∏–∫—Å)
        """


        response = model.generate_content([uploaded_file, prompt_text], request_options={"timeout": 600})
        response_text = response.text.strip().replace("```json", "").replace("```", "").strip()

        return json.loads(response_text)

    except Exception as e:
        print(f"  > ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ '{pdf_path.name}': {e}")
        return None
    finally:
        if uploaded_file:
            try:
                genai.delete_file(uploaded_file.name)
            except Exception as e:
                pass  # –û—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å


def main():
    if not setup_environment():
        return

    model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest")
    person_folder = find_person_folder()
    if not person_folder:
        return

    inclusion_folder = person_folder / "–û –≤–∫–ª—é—á–µ–Ω–∏–∏"
    if not inclusion_folder.is_dir():
        print(f"–ü–∞–ø–∫–∞ '–û –≤–∫–ª—é—á–µ–Ω–∏–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ '{person_folder}'.")
        return

    analysis_folder = person_folder / "–û –≤–∫–ª—é—á–µ–Ω–∏–∏ –ê–Ω–∞–ª–∏–∑"
    analysis_folder.mkdir(exist_ok=True)
    print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {analysis_folder.resolve()}")

    for pdf_path in sorted(inclusion_folder.glob("*.pdf")):
        print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {pdf_path.name} ---")
        analysis_result = analyze_pdf(pdf_path, model)
        if analysis_result and isinstance(analysis_result, dict):
            creditor_name = analysis_result.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π_–∫—Ä–µ–¥–∏—Ç–æ—Ä")
            safe_creditor_name = "".join(c for c in creditor_name if c.isalnum() or c in " -").rstrip()
            output_filename = analysis_folder / f"{safe_creditor_name}.json"
            with open(output_filename, "w", encoding="utf-8") as f:
                json.dump(analysis_result, f, ensure_ascii=False, indent=4)
            print(f"  > ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_filename}")


if __name__ == "__main__":
    main()